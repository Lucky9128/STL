wait(&var):
    A call to wait() blocks the calling process until one of its child processes exits or a signal is received.
    whenever childs completes it work parent calls wait to check to delete entry in page table of child
    If any process has more than one child processes, then after calling wait(), parent process has to be in wait state if no child terminates.
    If only one child process is terminated, then return a wait() returns process ID of the terminated child process.
    If more than one child processes are terminated than wait() reap any arbitrarily child and return a process ID of that child process.
    If any process has no child process then wait() returns immediately “-1”.

waitpid():
    We know if more than one child processes are terminated, then wait() reaps any arbitrarily child process but if we want to reap any 
    specific child process, we use waitpid() function.

    Syntax : pid waitpid(child_pid, &status, options);

    Options: 
        If 0 means no option parent has to wait for terminates child.
        If WNOHANG means parent does not wait if child does not terminate just check and return waitpid().(not block parent process)
        If child_pid is -1 then means any arbitrarily child, here waitpid() work same as wait() work. 

    Return :
        pid of child, if child has exited
        0, if using WNOHANG and child hasn’t exited
    
